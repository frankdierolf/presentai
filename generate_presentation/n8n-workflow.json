{
  "name": "My workflow copy 2",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "a9c76d3f-10f3-4e2e-9dfe-d98f344bca91",
        "responseMode": "responseNode",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "144441b8-f7d9-450e-b049-69dfe942c289",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        0,
        -16
      ],
      "webhookId": "a9c76d3f-10f3-4e2e-9dfe-d98f344bca91"
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "=gpt-4o",
        "prompt": {
          "messages": [
            {
              "role": "system",
              "content": "={{ $json.prompts }}"
            }
          ]
        },
        "options": {},
        "requestOptions": {}
      },
      "id": "b19dba88-9ebb-4312-9fa5-84ad69371bd8",
      "name": "OpenAI Summary",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        896,
        -16
      ],
      "credentials": {
        "openAiApi": {
          "id": "PTnL6JdLWJkUKQxR",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json[\"results\"]}}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1856,
        -16
      ],
      "id": "fc0c0c72-06ed-497f-903f-c1f792db8e94",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "file",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        224,
        -16
      ],
      "id": "ea1f5217-2200-4e59-80eb-71b6d37c6137",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "return {\n  \"json\": {\n    \"prompts\":   [`You are an assistant that transforms raw text into a Slidev-compatible Markdown slide deck.\n\nPlease follow these rules:\n- Use Slidev formatting: separate each slide with exactly \"---\" on its own line.\n- Use \"#\" for main slide titles.\n- Use \"##\" or \"###\" for subheadings and structure.\n- Use bullet lists (\"-\") and bold text (\"**\") as needed.\n- Ensure each slide is self-contained, concise, and clean.\n- Output a valid Slidev Markdown file without extra explanations.\n\nHere is the source text::\\n\\n${$input.first().json.text}`,\n`Summarize the following content in 3-5 sentences:\\n\\n${$input.first().json.text}`\n    ]\n  }\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        -16
      ],
      "id": "ad11f51c-a2aa-4199-8fc2-358357a1d97e",
      "name": "Get Prompts"
    },
    {
      "parameters": {
        "fieldToSplitOut": "prompts",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        672,
        -16
      ],
      "id": "04c09f3f-5d33-4510-89fb-0c1cf113e928",
      "name": "Split Out"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nlet index = 0\nconst results = {} \nfor (const item of $input.all()) {\n  if (index === 0){\n    results.presentation = item.json.message.cleaned\n  } else if (index === 1){\n    results.summary = item.json.message.content\n  }\n  index += 1\n}\n\nreturn { \"json\": {results}}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1488,
        -16
      ],
      "id": "c46c70ce-f2a6-4f4e-8983-62fae30922c6",
      "name": "Code"
    },
    {
      "parameters": {
        "content": "## TODOs\n- Convert to proper markdown\n- Upload text to file storage, save as .md\n- Ask for theme\n- Button for redirect\n- Download .md when page loaded",
        "height": 272
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1152,
        304
      ],
      "typeVersion": 1,
      "id": "3a3f10bf-2c08-427b-ab36-067a60511247",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst item = $input.first().json.message\nconst content = item.content\nlet cleaned = ''\ntry {\n  const unescaped = JSON.parse(content)\n  cleaned = unescaped\n    .replace(/^```markdown\\s*/, '') // remove starting triple backticks and markdown\n    .replace(/\\s*```$/, '')         // remove ending triple backticks\n  item.cleaned = cleaned\n} catch (e) {\n  console.log('Invalid JSON, skipping cleanup')\n  item.cleaned = content\n}\n\nreturn $input.all()"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1152,
        -16
      ],
      "id": "c3394b1d-2589-4cbe-8d0f-268aab49c9c4",
      "name": "Postprocess Markdown"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "message.cleaned",
        "binaryPropertyName": "file",
        "options": {
          "fileName": "slides.md"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1424,
        288
      ],
      "id": "d9db7d37-b395-42d1-933a-ea1a2c785f6a",
      "name": "Convert to File",
      "executeOnce": true
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Summary": {
      "main": [
        [
          {
            "node": "Postprocess Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        []
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Get Prompts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Prompts": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "OpenAI Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postprocess Markdown": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "78274465-1588-4f16-be4d-041efbd08a26",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "270e5bcdd2d27d129e2a5941654814a3271904a168cb8962f01525235e4a5f5b"
  },
  "id": "gtClmAOUFpJoWqwl",
  "tags": []
}