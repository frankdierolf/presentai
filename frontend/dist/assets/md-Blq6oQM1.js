import{r as g,M as K,f as i,o as s,g as T,i as w,n as C,t as N,J as W,F as q,_ as G,b as H,w as Y,e as Q,v as X,x as Z,K as V}from"./modules/vue-BG18ae0b.js";import{u as $,f as ee}from"./slidev/context-DD3wZS71.js";import"./monaco/bundled-types-CXJyFkho.js";import{_ as te,k as oe}from"./index-DYsT5Rp4.js";import{I as ae}from"./slidev/default-CERE7t8u.js";import"./modules/file-saver-DnRyLYBS.js";import"./modules/shiki-Dr30Sr-r.js";const ne={class:"realtime-container"},se=["disabled"],ie={key:0},re={key:1},ce={key:2},le={key:3},ue={key:0,class:"status"},de={key:0},pe={key:1},ve={key:2,class:"transcript"},me={key:3,class:"notifications"},x="http://localhost:3000",fe={__name:"RealtimeButton",setup(R){$();const b=oe(),d=g(!1),f=g(!1),p=g(!1),v=g(!1),n=g(""),k=g(""),h=g([]);let c=null,l=null,a=null,F=0;function r(t,e="info"){const o={id:++F,message:t,type:e,timestamp:Date.now()};h.value.push(o),setTimeout(()=>{const u=h.value.findIndex(m=>m.id===o.id);u>-1&&h.value.splice(u,1)},3e3)}function P(t){try{t==="next"?(b.next(),r("Navigated to next slide","success")):t==="previous"&&(b.prev(),r("Navigated to previous slide","success"))}catch(e){console.error("Navigation error:",e),r("Failed to navigate slide","error")}}function J(){v.value=!0,r("Voice mode enabled - you will hear AI responses","success"),a&&(a.volume=1,a.muted=!1)}function j(){v.value=!1,r("Voice mode disabled - silent mode active","info"),a&&(a.volume=0,a.muted=!0)}async function B(){try{const t=await fetch(`${x}/session`,{method:"POST",headers:{"Content-Type":"application/json"}});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return(await t.json()).client_secret.value}catch(t){throw console.error("Failed to fetch ephemeral token:",t),t}}async function D(){try{d.value=!0,n.value="Getting ephemeral token...";const t=await B();n.value="Setting up voice commands...",c=new RTCPeerConnection,n.value="Requesting microphone access...";const e=await navigator.mediaDevices.getUserMedia({audio:!0}),o=e.getTracks()[0];c.addTrack(o,e),l=c.createDataChannel("oai-events"),l.addEventListener("message",I),l.addEventListener("open",()=>{console.log("Data channel opened"),f.value=!0,d.value=!1,n.value='Voice commands ready! Say "next slide", "previous slide", "enable voice", or "disable voice"'}),c.addEventListener("track",M=>{const[z]=M.streams;console.log("Received remote audio stream"),a||(a=new Audio,a.autoplay=!0),a.srcObject=z,v.value?(a.volume=1,a.muted=!1):(a.volume=0,a.muted=!0),a.play().catch(U=>{console.error("Error playing audio:",U)})}),n.value="Establishing connection...";const u=await c.createOffer();await c.setLocalDescription(u);const _=await fetch("https://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2025-06-03",{method:"POST",body:u.sdp,headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/sdp"}});if(!_.ok)throw new Error(`SDP exchange failed: ${_.status}`);const S={type:"answer",sdp:await _.text()};await c.setRemoteDescription(S),r("Voice commands activated!","success")}catch(t){console.error("Failed to initialize WebRTC:",t),n.value=`Connection failed: ${t.message}`,d.value=!1,r(`Connection failed: ${t.message}`,"error")}}function I(t){try{const e=JSON.parse(t.data);switch(console.log("Server event:",e),e.type){case"session.created":console.log("Session created successfully"),n.value="Voice commands ready!";break;case"input_audio_buffer.speech_started":p.value=!0,n.value="Listening for commands...";break;case"input_audio_buffer.speech_stopped":p.value=!1,n.value="Processing command...";break;case"conversation.item.input_audio_transcription.completed":e.transcript&&(k.value=e.transcript);break;case"response.done":if(e.response.output&&e.response.output.length>0){const o=e.response.output[0];if(o.type==="function_call")switch(o.name){case"navigate_slide":L(o);break;case"enable_voice":E(o,"enable");break;case"disable_voice":E(o,"disable");break}}n.value="Ready for next command...";break;case"error":console.error("Server error:",e),n.value=`Error: ${e.message}`,r(`AI Error: ${e.message}`,"error");break}}catch(e){console.error("Failed to parse server event:",e)}}async function L(t){try{console.log("Navigation call received:",t);const e=JSON.parse(t.arguments),{direction:o,confirmation:u}=e,m=await fetch(`${x}/api/tool/navigate`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({direction:o,confirmation:u})}),y=await m.json();if(m.ok){P(o);const _={type:"conversation.item.create",item:{type:"function_call_output",call_id:t.call_id,output:JSON.stringify(y)}};l.send(JSON.stringify(_));const S={type:"response.create"};l.send(JSON.stringify(S))}else console.error("Navigation execution failed:",y),r("Failed to execute navigation","error")}catch(e){console.error("Failed to handle navigation call:",e),r("Error processing navigation","error")}}async function E(t,e){try{console.log("Voice control call received:",t,e);const u=await fetch(`${x}${e==="enable"?"/api/tool/enable-voice":"/api/tool/disable-voice"}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({})}),m=await u.json();if(u.ok){e==="enable"?J():j();const y={type:"conversation.item.create",item:{type:"function_call_output",call_id:t.call_id,output:JSON.stringify(m)}};l.send(JSON.stringify(y));const _={type:"response.create"};l.send(JSON.stringify(_))}else console.error("Voice control execution failed:",m),r("Failed to execute voice control","error")}catch(o){console.error("Failed to handle voice control call:",o),r("Error processing voice control","error")}}function O(){c&&(c.close(),c=null),l&&(l.close(),l=null),a&&(a.pause(),a.srcObject=null,a=null),f.value=!1,d.value=!1,p.value=!1,v.value=!1,n.value="",k.value=""}async function A(){f.value?O():await D()}return K(()=>{O()}),(t,e)=>(s(),i("div",ne,[T("button",{onClick:A,disabled:d.value,class:C([{connecting:d.value,connected:f.value,recording:p.value},"realtime-button"])},[d.value?(s(),i("span",ie,"Connecting...")):f.value&&!p.value?(s(),i("span",re,"🎤 Voice Commands Active")):p.value?(s(),i("span",ce,"🎤 Listening...")):(s(),i("span",le,"🗣️ Enable Voice Commands"))],10,se),n.value?(s(),i("div",ue,N(n.value),1)):w("v-if",!0),f.value?(s(),i("div",{key:1,class:C(["voice-mode-indicator",{"voice-enabled":v.value}])},[v.value?(s(),i("span",de,"🔊 Voice Mode: ON")):(s(),i("span",pe,"🔇 Voice Mode: OFF"))],2)):w("v-if",!0),k.value?(s(),i("div",ve,[e[0]||(e[0]=T("strong",null,"You said:",-1)),W(" "+N(k.value),1)])):w("v-if",!0),h.value.length>0?(s(),i("div",me,[(s(!0),i(q,null,G(h.value,o=>(s(),i("div",{key:o.id,class:C(`notification notification-${o.type}`)},N(o.message),3))),128))])):w("v-if",!0)]))}},_e=te(fe,[["__scopeId","data-v-357dec61"]]),Ce={__name:"realtime.md__slidev_15",setup(R){const{$clicksContext:b,$frontmatter:d}=$();return b.setup(),(f,p)=>{const v=_e;return s(),H(ae,X(Z(V(ee)(V(d),14))),{default:Y(()=>[p[0]||(p[0]=T("h1",null,"Realtime",-1)),Q(v)]),_:1,__:[0]},16)}}};export{Ce as default};
