import{r as g,M as z,f as i,o as c,g as $,i as w,n as N,t as x,K as q,F as W,U as G}from"./modules/vue-BFdwI2wm.js";import{u as K}from"./slidev/context-DVAJEKw_.js";import"./monaco/bundled-types-CveBi5OJ.js";import{_ as H,k as Y}from"./index-bqrD55D_.js";const Q={class:"realtime-container"},X=["disabled"],Z={key:0},ee={key:1},te={key:2},oe={key:3},ne={key:0,class:"status"},ae={key:0},se={key:1},re={key:2,class:"transcript"},ie={key:3,class:"notifications"},C="http://localhost:3000",ce={__name:"RealtimeButton",setup(le){K();const h=Y(),f=g(!1),y=g(!1),b=g(!1),m=g(!1),r=g(""),S=g(""),_=g([]);let u=null,l=null,n=null,F=0;function s(t,e="info"){const o={id:++F,message:t,type:e,timestamp:Date.now()};_.value.push(o),setTimeout(()=>{const a=_.value.findIndex(d=>d.id===o.id);a>-1&&_.value.splice(a,1)},3e3)}function V(t){try{t==="next"?(h.next(),s("Navigated to next slide","success")):t==="previous"&&(h.prev(),s("Navigated to previous slide","success"))}catch(e){console.error("Navigation error:",e),s("Failed to navigate slide","error")}}function E(){m.value=!0,s("Voice mode enabled - you will hear AI responses","success"),n&&(n.volume=1,n.muted=!1)}function P(){m.value=!1,s("Voice mode disabled - silent mode active","info"),n&&(n.volume=0,n.muted=!0)}function J(){try{const t=h.currentSlideRoute.value;if(!t)return"Unable to access current slide route";let e="";if(t.meta?.slide){const o=t.meta.slide;o.content?e=o.content:o.note?e=`Note: ${o.note}`:o.frontmatter?.title&&(e=o.frontmatter.title)}if(!e||e.trim().length<5){const o=document.querySelector(".slidev-page");if(o){const a=o.cloneNode(!0);[".slidev-nav",".slidev-controls","script","style","button",".slidev-icon-btn"].forEach(v=>{a.querySelectorAll(v).forEach(k=>k.remove())}),e=a.textContent||a.innerText||"",e=e.replace(/\s+/g," ").replace(/Welcome to Slidev|Presentation slides for developers|Press Space for next page/gi,"").trim()}}return e&&(e=e.replace(/^#{1,6}\s+/gm,"").replace(/\*\*(.*?)\*\*/g,"$1").replace(/\*(.*?)\*/g,"$1").replace(/`(.*?)`/g,"$1").replace(/\[([^\]]+)\]\([^)]+\)/g,"$1").replace(/\n\s*\n/g,`
`).replace(/\s+/g," ").trim()),(!e||e.length<10)&&(e=`This appears to be slide ${h.currentPage.value} with minimal text content, primarily visual elements, or content that couldn't be extracted.`),console.log("Extracted slide content:",e),e}catch(t){return console.error("Error extracting slide content:",t),`Unable to extract content from slide ${h.currentPage.value}. This might be a visual-heavy slide.`}}async function R(){try{const t=await fetch(`${C}/session`,{method:"POST",headers:{"Content-Type":"application/json"}});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return(await t.json()).client_secret.value}catch(t){throw console.error("Failed to fetch ephemeral token:",t),t}}async function j(){try{f.value=!0,r.value="Getting ephemeral token...";const t=await R();r.value="Setting up voice commands...",u=new RTCPeerConnection,r.value="Requesting microphone access...";const e=await navigator.mediaDevices.getUserMedia({audio:!0}),o=e.getTracks()[0];u.addTrack(o,e),l=u.createDataChannel("oai-events"),l.addEventListener("message",A),l.addEventListener("open",()=>{console.log("Data channel opened"),y.value=!0,f.value=!1,r.value='Voice commands ready! Say "next slide", "previous slide", "enable voice", "disable voice", or ask for feedback!'}),u.addEventListener("track",M=>{const[U]=M.streams;console.log("Received remote audio stream"),n||(n=new Audio,n.autoplay=!0),n.srcObject=U,m.value?(n.volume=1,n.muted=!1):(n.volume=0,n.muted=!0),n.play().catch(B=>{console.error("Error playing audio:",B)})}),r.value="Establishing connection...";const a=await u.createOffer();await u.setLocalDescription(a);const p=await fetch("https://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2025-06-03",{method:"POST",body:a.sdp,headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/sdp"}});if(!p.ok)throw new Error(`SDP exchange failed: ${p.status}`);const k={type:"answer",sdp:await p.text()};await u.setRemoteDescription(k),s("Voice commands activated!","success")}catch(t){console.error("Failed to initialize WebRTC:",t),r.value=`Connection failed: ${t.message}`,f.value=!1,s(`Connection failed: ${t.message}`,"error")}}function A(t){try{const e=JSON.parse(t.data);switch(e.type){case"session.created":console.log("Session created successfully"),r.value="Voice commands ready!";break;case"input_audio_buffer.speech_started":b.value=!0,r.value="Listening for commands...";break;case"input_audio_buffer.speech_stopped":b.value=!1,r.value="Processing command...";break;case"conversation.item.input_audio_transcription.completed":e.transcript&&(S.value=e.transcript);break;case"response.done":if(e.response.output&&e.response.output.length>0){const o=e.response.output[0];if(o.type==="function_call")switch(o.name){case"navigate_slide":D(o);break;case"enable_voice":O(o,"enable");break;case"disable_voice":O(o,"disable");break;case"get_slide_feedback":I(o);break}}r.value="Ready for next command...";break;case"error":console.error("Server error:",e),r.value=`Error: ${e.message}`,s(`AI Error: ${e.message}`,"error");break}}catch(e){console.error("Failed to parse server event:",e)}}async function D(t){try{console.log("Navigation call received:",t);const e=JSON.parse(t.arguments),{direction:o,confirmation:a}=e,d=await fetch(`${C}/api/tool/navigate`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({direction:o,confirmation:a})}),v=await d.json();if(d.ok){V(o);const p={type:"conversation.item.create",item:{type:"function_call_output",call_id:t.call_id,output:JSON.stringify(v)}};l.send(JSON.stringify(p));const k={type:"response.create"};l.send(JSON.stringify(k))}else console.error("Navigation execution failed:",v),s("Failed to execute navigation","error")}catch(e){console.error("Failed to handle navigation call:",e),s("Error processing navigation","error")}}async function O(t,e){try{console.log("Voice control call received:",t,e);const a=await fetch(`${C}${e==="enable"?"/api/tool/enable-voice":"/api/tool/disable-voice"}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({})}),d=await a.json();if(a.ok){e==="enable"?E():P();const v={type:"conversation.item.create",item:{type:"function_call_output",call_id:t.call_id,output:JSON.stringify(d)}};l.send(JSON.stringify(v));const p={type:"response.create"};l.send(JSON.stringify(p))}else console.error("Voice control execution failed:",d),s("Failed to execute voice control","error")}catch(o){console.error("Failed to handle voice control call:",o),s("Error processing voice control","error")}}async function I(t){try{console.log("Feedback call received:",t),m.value||E();const e=J();console.log("Current slide content:",e);const o=h.currentPage.value;s("Analyzing current slide for feedback...","info");const a=await fetch(`${C}/api/tool/feedback`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({slideContent:e,slideNumber:o})}),d=await a.json();if(a.ok){const v={type:"conversation.item.create",item:{type:"function_call_output",call_id:t.call_id,output:JSON.stringify({...d,slideContent:e,slideNumber:o,instruction:"Please provide enthusiastic and constructive feedback on this slide content."})}};l.send(JSON.stringify(v));const p={type:"response.create"};l.send(JSON.stringify(p)),s("Getting AI feedback on your slide...","success")}else console.error("Feedback execution failed:",d),s("Failed to get slide feedback","error")}catch(e){console.error("Failed to handle feedback call:",e),s("Error processing feedback request","error")}}function T(){u&&(u.close(),u=null),l&&(l.close(),l=null),n&&(n.pause(),n.srcObject=null,n=null),y.value=!1,f.value=!1,b.value=!1,m.value=!1,r.value="",S.value=""}async function L(){y.value?T():await j()}return z(()=>{T()}),(t,e)=>(c(),i("div",Q,[$("button",{onClick:L,disabled:f.value,class:N([{connecting:f.value,connected:y.value,recording:b.value},"realtime-button"])},[f.value?(c(),i("span",Z,"Connecting...")):y.value&&!b.value?(c(),i("span",ee,"🎤 Voice Commands Active")):b.value?(c(),i("span",te,"🎤 Listening...")):(c(),i("span",oe,"🗣️ Enable Voice Commands"))],10,X),r.value?(c(),i("div",ne,x(r.value),1)):w("v-if",!0),y.value?(c(),i("div",{key:1,class:N(["voice-mode-indicator",{"voice-enabled":m.value}])},[m.value?(c(),i("span",ae,"🔊 Voice Mode: ON")):(c(),i("span",se,"🔇 Voice Mode: OFF"))],2)):w("v-if",!0),S.value?(c(),i("div",re,[e[0]||(e[0]=$("strong",null,"You said:",-1)),q(" "+x(S.value),1)])):w("v-if",!0),_.value.length>0?(c(),i("div",ie,[(c(!0),i(W,null,G(_.value,o=>(c(),i("div",{key:o.id,class:N(`notification notification-${o.type}`)},x(o.message),3))),128))])):w("v-if",!0)]))}},fe=H(ce,[["__scopeId","data-v-d9cb4d63"]]);export{fe as _};
